"""
Django settings for MOVOS project.
Generated by 'django-admin startproject' using Django 5.0.7.
This settings module is environment-driven for easy Docker/production use.
"""

from pathlib import Path
import os

BASE_DIR = Path(__file__).resolve().parent.parent

# Security & environment
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-5o(k+1^on5m8ca--ieap-e%wqn6(#vnouc8%i3!tbt-((1%hh7')

# --- INICIO DE LA CORRECCIÓN ---
# Hemos desactivado la lógica compleja y hemos puesto los valores directamente.
DEBUG = False

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '192.168.1.22', # Tu IP local por si acaso
    'www.rochart-multiservicios.cl', # Tu dominio de producción
]

CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://192.168.1.22:8000', # Tu IP local por si acaso
    'https://www.rochart-multiservicios.cl', # Tu dominio de producción
    'https://*.trycloudflare.com',
]


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cashier',
    'products',
    'users.apps.UsersConfig',
    'reports',
    'auth_app',
    'django.contrib.humanize',
    'sucursales',
]

AUTH_USER_MODEL = 'auth_app.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'MOVOS.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MOVOS.wsgi.application'

# Database
DB_ENGINE = os.environ.get('DB_ENGINE', 'sqlite')
if DB_ENGINE == 'postgres':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('POSTGRES_DB', 'movos'),
            'USER': os.environ.get('POSTGRES_USER', 'movos'),
            'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'movos'),
            'HOST': os.environ.get('POSTGRES_HOST', 'db'),
            'PORT': int(os.environ.get('POSTGRES_PORT', '5432')),
        }
    }
    # Optional SSL (e.g., Neon, some managed Postgres)
    if os.environ.get('POSTGRES_SSL', 'false').lower() in ('1', 'true', 'yes'):
        DATABASES['default']['OPTIONS'] = { 'sslmode': 'require' }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = os.environ.get('LANGUAGE_CODE', 'es-cl')
TIME_ZONE = os.environ.get('TIME_ZONE', 'America/Santiago')
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Umbral global para marcar stock como "bajo"
LOW_STOCK_THRESHOLD = int(os.environ.get('LOW_STOCK_THRESHOLD', '2'))